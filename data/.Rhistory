shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.998, shape = shape_estimate, rate = rate_estimate)
)
#Calculate the 99.9% quantile of the gamma distribution of each the false positive for each target as threshold
# Assuming 'filtered_reads' is your dataframe with columns 'n' and 'X2'
results_threshold <- filtered_reads %>%
group_by(X2) %>%
summarise(
mean_data = mean(n),
var_data = var(n)
) %>%
mutate(
shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.999, shape = shape_estimate, rate = rate_estimate)
)
# Step 1: Calculate a fallback value for each X2 in filtered_reads
fallback_values <- filtered_reads %>%
group_by(X2) %>%
summarise(fallback_n = max(n), .groups = 'drop') # Using max, adjust as needed
# Step 2: Join fallback_values with results_threshold
results_threshold <- results_threshold %>%
left_join(fallback_values, by = "X2")
# Step 3: Replace NA in quantile_99_9 with fallback_n
results_threshold <- results_threshold %>%
mutate(
quantile_99_9 = ifelse(is.na(quantile_99_9), fallback_n, quantile_99_9)
) %>%
dplyr::select(-fallback_n) # Removing fallback_n to clean up the dataframe
#Join results_threshold and reads dataframe to calculate calculate real_n
reads <- reads %>%
left_join(results_threshold %>% dplyr::select(X2, quantile_99_9), by = "X2")
# Subtract quantile_99_9 from n to create the new variable real_n
reads <- reads %>%
mutate(real_n = ifelse(n - quantile_99_9 < 0, 0, n - quantile_99_9))
reads[reads == 0] <- NA
#<1000
ggplot(complete(reads, X2, Sample_real), aes(X2, Sample_real)) +
geom_tile(aes(fill = case_when(
is.na(real_n) ~ "gray95",
real_n > 0 & real_n <= 1 ~ "red",
real_n > 1 & real_n <= 100 ~ "darkorange",
real_n > 100 & real_n <= 1000 ~ "gold1",# Assuming you want to include 1 in the range
TRUE ~ "black"
)), colour = "white") +
labs(title = "Multiplex-testing on Bangladesh strains, wihtout considering PCR Neg 99.9", x = "Probe-pair", y = "Sample") +
scale_fill_manual(values = c("gray95" = "gray95", "black" = "black", "red" = "red", "darkorange"="darkorange", "gold1"="gold1"), guide = "none") +
theme(axis.text.x = element_text(size = 8, angle = 90),
axis.text.y = element_text(size = 6.5))
View(filtered_reads)
#3) Import AGAIN all results WITH THRESHOLD(positive and negative included)
setwd("~/switchdrive/Institution/dMLA/AMRandVFsandPhylo/Eurofins/20230503_Order_Tube2")
options(max.print=999999)
reads = read.table("20230503_sequencing_targets_all_Tube2.txt", header= TRUE) #--->total dataset
reads
#2) Import all results (positive and negative included)
setwd("~/switchdrive/Institution/dMLA/08_AMR_VFs_Phylo_dMLA/Eurofins/20230503_Order_Tube2")
options(max.print=999999)
reads = read.table("20230503_sequencing_targets_all_Tube2.txt", header= TRUE) #--->total dataset
reads
reads <- reads %>%
mutate(Sample = as.character(X1)) %>%
mutate(Sample = case_when(
Sample == "ATGGTTG" ~ "A1", Sample == "TATCGTC" ~ "A2",Sample == "CCGACAT" ~ "A3", Sample == "GGTCTTG" ~ "A4",Sample == "AGCTGTA" ~ "A5",
Sample == "AACACCT" ~ "A6",Sample == "CACGTTT" ~ "A7",Sample == "GATCGTT" ~ "A8",Sample == "CATACGT" ~ "A9", Sample == "TTGCTAC" ~ "A10",
Sample == "GTTCTGG" ~ "A11",Sample == "CAATCAC" ~ "A12",Sample == "CTGCTGT" ~ "B1",Sample == "ATCCTCG" ~ "B2", Sample == "AGCAAAC" ~ "B3",
Sample == "GCACTTT" ~ "B4", Sample == "CTGACAC" ~ "B5",Sample == "GCAAATG" ~ "B6",Sample == "GTTTCGG" ~ "B7",Sample == "CTACGTT" ~ "B8",
Sample == "GAATCGA" ~ "B9", Sample == "TACCTTC" ~ "B10", Sample == "GCCATAC" ~ "B11",Sample == "GCAACGA" ~ "B12",Sample == "TGCAAAC" ~ "C1",
Sample == "TGCATCC" ~ "C2",Sample == "GTGATAC" ~ "C3",Sample == "ACCAGAT" ~ "C4",Sample == "CTTTCCA" ~ "C5",Sample == "CATCGGT" ~ "C6",
Sample == "GATTGGC" ~ "C7", Sample == "TCGCGTT" ~ "C8", Sample == "CGATCAC" ~ "C9",Sample == "CATGAAG" ~ "C10",Sample == "GCTTTCT" ~ "C11",
Sample == "AATGCCT" ~ "C12",Sample == "TGTAGGG" ~ "D1",Sample == "AGAAGAC" ~ "D2",Sample == "AACGTGT" ~ "D3",Sample == "GTGAAGA" ~ "D4",
Sample == "CCGCATA" ~ "D5",Sample == "CGGATGA" ~ "D6",Sample == "ACGGAAC" ~ "D7", Sample == "ACGTCAT" ~ "D8",Sample == "CAGTAGG" ~ "D9",
Sample == "TCTGGAA" ~ "D10", Sample == "GTCGTAT" ~ "D11", Sample == "TCCTCAT" ~ "D12",Sample == "GTGCTAT" ~ "E1",Sample == "AACCAAG" ~ "E2",
Sample == "TCGTACA" ~ "E3",Sample == "TGCCCAA" ~ "E4", Sample == "ACACGTG" ~ "E5",Sample == "TGGGTGA" ~ "E6",Sample == "TAGAACG" ~ "E7",
Sample == "GTCCTCT" ~ "E8", Sample == "GCCTATA" ~ "E9", Sample == "AACAGTG" ~ "E10",Sample == "TGTGAAC" ~ "E11",Sample == "AAGCACA" ~ "E12",
Sample == "TGACTCT" ~ "F1", Sample == "AACCGCT" ~ "F2", Sample == "TATGCAG" ~ "F3",Sample == "CCATCTC" ~ "F4",Sample == "GGTCATG" ~ "F5",
Sample == "ATAGAGC" ~ "F6", Sample == "CACAGAT" ~ "F7", Sample == "GTGTCCT" ~ "F8",Sample == "TCTTCGT" ~ "F9",Sample == "ATCCAGT" ~ "F10",
Sample == "AAACCCT" ~ "F11", Sample == "TAGAGCG" ~ "F12", Sample == "TTCCAGG" ~ "G1",Sample == "AGTCGTG" ~ "G2",Sample == "GAACTGA" ~ "G3",
Sample == "GGACCTA" ~ "G4", Sample == "CGCATAC" ~ "G5", Sample == "ACAGGAT" ~ "G6",Sample == "GATATCG" ~ "G7",Sample == "CCATTCA" ~ "G8",
Sample == "GTTGCTA" ~ "G9", Sample == "CTGGTAC" ~ "G10", Sample == "ACTGTGT" ~ "G11",Sample == "AAAAGGC" ~ "G12",Sample == "ACAAAGC" ~ "H1",
Sample == "GTCTTCT" ~ "H2", Sample == "CCACTAG" ~ "H3", Sample == "TAGATGA" ~ "H4",Sample == "ACGTTGC" ~ "H5",Sample == "CGTTTCA" ~ "H6",
Sample == "TAAGATA" ~ "H7", Sample == "TGTATGT" ~ "H8", Sample == "ATCATTA" ~ "H9",Sample == "TCGCTAG" ~ "H10",Sample == "ACATTCA" ~ "H11",
Sample == "GAACACA" ~ "H12"))
reads <- reads %>%
mutate(Sample_real = as.character(X1)) %>%
mutate(Sample_real = case_when(
Sample_real == "ATGGTTG" ~ "mcr_28", Sample_real == "TATCGTC" ~ "mcr_64",Sample_real == "CCGACAT" ~ "aadA_1", Sample_real == "GGTCTTG" ~ "aadA_21",Sample_real == "AGCTGTA" ~ "aadA_57",
Sample_real == "AACACCT" ~ "aac3II_63",Sample_real == "CACGTTT" ~ "aac3VI_23",Sample_real == "GATCGTT" ~ "aac6I_6",Sample_real == "CATACGT" ~ "aac6I_123", Sample_real == "TTGCTAC" ~ "ant2Ia_1",
Sample_real == "GTTCTGG" ~ "aph6I_29",Sample_real == "CAATCAC" ~ "aph3_386",Sample_real == "CTGCTGT" ~ "qnrB_7",Sample_real == "ATCCTCG" ~ "z_Negative1", Sample_real == "AGCAAAC" ~ "qnrB_35",
Sample_real == "GCACTTT" ~ "qnrS_1", Sample_real == "CTGACAC" ~ "ermB_1",Sample_real == "GCAAATG" ~ "mphA_18",Sample_real == "GTTTCGG" ~ "dfrA_243",Sample_real == "CTACGTT" ~ "dfrA_369",
Sample_real == "GAATCGA" ~ "dfrA_15", Sample_real == "TACCTTC" ~ "dfrA_58", Sample_real == "GCCATAC" ~ "dfrA_1",Sample_real == "GCAACGA" ~ "sul1_5",Sample_real == "TGCAAAC" ~ "sul2_2",
Sample_real == "TGCATCC" ~ "sul3_36",Sample_real == "GTGATAC" ~ "tetA_13",Sample_real == "ACCAGAT" ~ "z_Negative2",Sample_real == "CTTTCCA" ~ "tetB_43",Sample_real == "CATCGGT" ~ "tetM_34",
Sample_real == "GATTGGC" ~ "intl1_25", Sample_real == "TCGCGTT" ~ "astA1_3", Sample_real == "CGATCAC" ~ "aatA2_2",Sample_real == "CATGAAG" ~ "aatA123_14aatA123_14",Sample_real == "GCTTTCT" ~ "ipaH32_1",
Sample_real == "AATGCCT" ~ "ipaH92_1",Sample_real == "TGTAGGG" ~ "eae11_1",Sample_real == "AGAAGAC" ~ "eae627_1",Sample_real == "AACGTGT" ~ "stx218_1",Sample_real == "GTGAAGA" ~ "stx2329_1",
Sample_real == "CCGCATA" ~ "aggR1_1",Sample_real == "CGGATGA" ~ "z_Negative3",Sample_real == "ACGGAAC" ~ "stx130_1", Sample_real == "ACGTCAT" ~ "stx1158_1",Sample_real == "CAGTAGG" ~ "bfpA8_2",
Sample_real == "TCTGGAA" ~ "invE13_2", Sample_real == "GTCGTAT" ~ "eltA7_3", Sample_real == "TCCTCAT" ~ "eltA45_10",Sample_real == "GTGCTAT" ~ "eltB1_2",Sample_real == "AACCAAG" ~ "eltB23_18",
Sample_real == "TCGTACA" ~ "estIa9_4",Sample_real == "TGCCCAA" ~ "estIa15_15", Sample_real == "ACACGTG" ~ "bfpF5_6",Sample_real == "TGGGTGA" ~ "bfpF10_5",Sample_real == "TAGAACG" ~ "aafA8_3",
Sample_real == "GTCCTCT" ~ "z_Negative4", Sample_real == "GCCTATA" ~ "aap22_3", Sample_real == "AACAGTG" ~ "aaiC1_7",Sample_real == "TGTGAAC" ~ "aaiC4_7",Sample_real == "AAGCACA" ~ "uidA1_60",
Sample_real == "TGACTCT" ~ "uidA6_16", Sample_real == "AACCGCT" ~ "gadph1_95", Sample_real == "TATGCAG" ~ "arpA1_9",Sample_real == "CCATCTC" ~ "chuA2_4",Sample_real == "GGTCATG" ~ "trpA35_4",
Sample_real == "ATAGAGC" ~ "Tsp1_9", Sample_real == "CACAGAT" ~ "yjaA1_2", Sample_real == "GTGTCCT" ~ "00_HH26H",Sample_real == "TCTTCGT" ~ "00_HH24CH",Sample_real == "ATCCAGT" ~ "00_HH08C",
Sample_real == "AAACCCT" ~ "00_358190-18", Sample_real == "TAGAGCG" ~ "00_Klebsiella pneuomniae", Sample_real == "TTCCAGG" ~ "00_215",Sample_real == "AGTCGTG" ~ "00_HH16H",Sample_real == "GAACTGA" ~ "00_HH20S",
Sample_real == "GGACCTA" ~ "00_327", Sample_real == "CGCATAC" ~ "00_HH15CH", Sample_real == "ACAGGAT" ~ "00_HH36S",Sample_real == "GATATCG" ~ "00_HH13H",Sample_real == "CCATTCA" ~ "00_25",
Sample_real == "GTTGCTA" ~ "00_346", Sample_real == "CTGGTAC" ~ "00_94", Sample_real == "ACTGTGT" ~ "00_263",Sample_real == "AAAAGGC" ~ "00_39",Sample_real == "ACAAAGC" ~ "00_14",
Sample_real == "GTCTTCT" ~ "00_207", Sample_real == "CCACTAG" ~ "00_G1_Alt2_Feb", Sample_real == "TAGATGA" ~ "00_Chur2_liquid",Sample_real == "ACGTTGC" ~ "00_B2_liquid",Sample_real == "CGTTTCA" ~ "00_B1_liquid",
Sample_real == "TAAGATA" ~ "mcr_28b", Sample_real == "TGTATGT" ~ "aadA_21b", Sample_real == "ATCATTA" ~ "bfpF10_5b",Sample_real == "TCGCTAG" ~ "stx130_1b",Sample_real == "ACATTCA" ~ "00_39b",
Sample_real == "GAACACA" ~ "PCR_Neg"))
#Distribution of reads------------------
##Filter of rows whit positive
filtered_reads <- reads %>%
filter(as.character(X2) != as.character(Sample_real))
#Plot distribution of false positive for each target
ggplot(filtered_reads, aes(x=n)) +
geom_histogram() +
theme_minimal() +
labs(title="Distribution of of false positive read counts for each probe-pair (Tube2)",
x="n",
y="Frequency") +
theme(legend.title = element_blank())+
facet_wrap(X2 ~ ., ncol = 10, scales="free")
#Calculate the 99.9% quantile of the gamma distribution of each the false positive for each target as threshold
# Assuming 'filtered_reads' is your dataframe with columns 'n' and 'X2'
results_threshold <- filtered_reads %>%
group_by(X2) %>%
summarise(
mean_data = mean(n),
var_data = var(n)
) %>%
mutate(
shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.999, shape = shape_estimate, rate = rate_estimate)
)
#Join results_threshold and reads dataframe to calculate calculate real_n
reads <- reads %>%
left_join(results_threshold %>% dplyr::select(X2, quantile_99_9), by = "X2")
# Subtract quantile_99_9 from n to create the new variable real_n
reads <- reads %>%
mutate(real_n = ifelse(n - quantile_99_9 < 0, 0, n - quantile_99_9))
reads[reads == 0] <- NA
#<1000
ggplot(complete(reads, X2, Sample_real), aes(X2, Sample_real)) +
geom_tile(aes(fill = case_when(
is.na(real_n) ~ "gray95",
real_n > 0 & real_n <= 1 ~ "red",
real_n > 1 & real_n <= 100 ~ "darkorange",
real_n > 100 & real_n <= 1000 ~ "gold1",# Assuming you want to include 1 in the range
TRUE ~ "black"
)), colour = "white") +
labs(title = "Multiplex-testing - Tube 2", x = "Probe-pair", y = "Sample") +
scale_fill_manual(values = c("gray95" = "gray95", "black" = "black", "red" = "red", "darkorange"="darkorange", "gold1"="gold1"), guide = "none") +
theme(axis.text.x = element_text(size = 8, angle = 90),
axis.text.y = element_text(size = 6.5))
#2) Import all results (positive and negative included)
setwd("~/switchdrive/Institution/dMLA/08_AMR_VFs_Phylo_dMLA/Eurofins/20230503_Order_Tube2")
options(max.print=999999)
reads = read.table("20230503_sequencing_targets_all_Tube2.txt", header= TRUE) #--->total dataset
reads
#3) Import AGAIN all results WITH THRESHOLD(positive and negative included)
setwd("~/switchdrive/Institution/dMLA/AMRandVFsandPhylo/Eurofins/20230503_Order_Tube2")
options(max.print=999999)
reads = read.table("20230503_sequencing_targets_all_Tube2.txt", header= TRUE) #--->total dataset
reads
reads <- reads %>%
mutate(Sample = as.character(X1)) %>%
mutate(Sample = case_when(
Sample == "ATGGTTG" ~ "A1", Sample == "TATCGTC" ~ "A2",Sample == "CCGACAT" ~ "A3", Sample == "GGTCTTG" ~ "A4",Sample == "AGCTGTA" ~ "A5",
Sample == "AACACCT" ~ "A6",Sample == "CACGTTT" ~ "A7",Sample == "GATCGTT" ~ "A8",Sample == "CATACGT" ~ "A9", Sample == "TTGCTAC" ~ "A10",
Sample == "GTTCTGG" ~ "A11",Sample == "CAATCAC" ~ "A12",Sample == "CTGCTGT" ~ "B1",Sample == "ATCCTCG" ~ "B2", Sample == "AGCAAAC" ~ "B3",
Sample == "GCACTTT" ~ "B4", Sample == "CTGACAC" ~ "B5",Sample == "GCAAATG" ~ "B6",Sample == "GTTTCGG" ~ "B7",Sample == "CTACGTT" ~ "B8",
Sample == "GAATCGA" ~ "B9", Sample == "TACCTTC" ~ "B10", Sample == "GCCATAC" ~ "B11",Sample == "GCAACGA" ~ "B12",Sample == "TGCAAAC" ~ "C1",
Sample == "TGCATCC" ~ "C2",Sample == "GTGATAC" ~ "C3",Sample == "ACCAGAT" ~ "C4",Sample == "CTTTCCA" ~ "C5",Sample == "CATCGGT" ~ "C6",
Sample == "GATTGGC" ~ "C7", Sample == "TCGCGTT" ~ "C8", Sample == "CGATCAC" ~ "C9",Sample == "CATGAAG" ~ "C10",Sample == "GCTTTCT" ~ "C11",
Sample == "AATGCCT" ~ "C12",Sample == "TGTAGGG" ~ "D1",Sample == "AGAAGAC" ~ "D2",Sample == "AACGTGT" ~ "D3",Sample == "GTGAAGA" ~ "D4",
Sample == "CCGCATA" ~ "D5",Sample == "CGGATGA" ~ "D6",Sample == "ACGGAAC" ~ "D7", Sample == "ACGTCAT" ~ "D8",Sample == "CAGTAGG" ~ "D9",
Sample == "TCTGGAA" ~ "D10", Sample == "GTCGTAT" ~ "D11", Sample == "TCCTCAT" ~ "D12",Sample == "GTGCTAT" ~ "E1",Sample == "AACCAAG" ~ "E2",
Sample == "TCGTACA" ~ "E3",Sample == "TGCCCAA" ~ "E4", Sample == "ACACGTG" ~ "E5",Sample == "TGGGTGA" ~ "E6",Sample == "TAGAACG" ~ "E7",
Sample == "GTCCTCT" ~ "E8", Sample == "GCCTATA" ~ "E9", Sample == "AACAGTG" ~ "E10",Sample == "TGTGAAC" ~ "E11",Sample == "AAGCACA" ~ "E12",
Sample == "TGACTCT" ~ "F1", Sample == "AACCGCT" ~ "F2", Sample == "TATGCAG" ~ "F3",Sample == "CCATCTC" ~ "F4",Sample == "GGTCATG" ~ "F5",
Sample == "ATAGAGC" ~ "F6", Sample == "CACAGAT" ~ "F7", Sample == "GTGTCCT" ~ "F8",Sample == "TCTTCGT" ~ "F9",Sample == "ATCCAGT" ~ "F10",
Sample == "AAACCCT" ~ "F11", Sample == "TAGAGCG" ~ "F12", Sample == "TTCCAGG" ~ "G1",Sample == "AGTCGTG" ~ "G2",Sample == "GAACTGA" ~ "G3",
Sample == "GGACCTA" ~ "G4", Sample == "CGCATAC" ~ "G5", Sample == "ACAGGAT" ~ "G6",Sample == "GATATCG" ~ "G7",Sample == "CCATTCA" ~ "G8",
Sample == "GTTGCTA" ~ "G9", Sample == "CTGGTAC" ~ "G10", Sample == "ACTGTGT" ~ "G11",Sample == "AAAAGGC" ~ "G12",Sample == "ACAAAGC" ~ "H1",
Sample == "GTCTTCT" ~ "H2", Sample == "CCACTAG" ~ "H3", Sample == "TAGATGA" ~ "H4",Sample == "ACGTTGC" ~ "H5",Sample == "CGTTTCA" ~ "H6",
Sample == "TAAGATA" ~ "H7", Sample == "TGTATGT" ~ "H8", Sample == "ATCATTA" ~ "H9",Sample == "TCGCTAG" ~ "H10",Sample == "ACATTCA" ~ "H11",
Sample == "GAACACA" ~ "H12"))
reads <- reads %>%
mutate(Sample_real = as.character(X1)) %>%
mutate(Sample_real = case_when(
Sample_real == "ATGGTTG" ~ "mcr_28", Sample_real == "TATCGTC" ~ "mcr_64",Sample_real == "CCGACAT" ~ "aadA_1", Sample_real == "GGTCTTG" ~ "aadA_21",Sample_real == "AGCTGTA" ~ "aadA_57",
Sample_real == "AACACCT" ~ "aac3II_63",Sample_real == "CACGTTT" ~ "aac3VI_23",Sample_real == "GATCGTT" ~ "aac6I_6",Sample_real == "CATACGT" ~ "aac6I_123", Sample_real == "TTGCTAC" ~ "ant2Ia_1",
Sample_real == "GTTCTGG" ~ "aph6I_29",Sample_real == "CAATCAC" ~ "aph3_386",Sample_real == "CTGCTGT" ~ "qnrB_7",Sample_real == "ATCCTCG" ~ "Negative1", Sample_real == "AGCAAAC" ~ "qnrB_35",
Sample_real == "GCACTTT" ~ "qnrS_1", Sample_real == "CTGACAC" ~ "ermB_1",Sample_real == "GCAAATG" ~ "mphA_18",Sample_real == "GTTTCGG" ~ "dfrA_243",Sample_real == "CTACGTT" ~ "dfrA_369",
Sample_real == "GAATCGA" ~ "dfrA_15", Sample_real == "TACCTTC" ~ "dfrA_58", Sample_real == "GCCATAC" ~ "dfrA_1",Sample_real == "GCAACGA" ~ "sul1_5",Sample_real == "TGCAAAC" ~ "sul2_2",
Sample_real == "TGCATCC" ~ "sul3_36",Sample_real == "GTGATAC" ~ "tetA_13",Sample_real == "ACCAGAT" ~ "Negative2",Sample_real == "CTTTCCA" ~ "tetB_43",Sample_real == "CATCGGT" ~ "tetM_34",
Sample_real == "GATTGGC" ~ "intl1_25", Sample_real == "TCGCGTT" ~ "astA1_3", Sample_real == "CGATCAC" ~ "aatA2_2",Sample_real == "CATGAAG" ~ "aatA123_14aatA123_14",Sample_real == "GCTTTCT" ~ "ipaH32_1",
Sample_real == "AATGCCT" ~ "ipaH92_1",Sample_real == "TGTAGGG" ~ "eae11_1",Sample_real == "AGAAGAC" ~ "eae627_1",Sample_real == "AACGTGT" ~ "stx218_1",Sample_real == "GTGAAGA" ~ "stx2329_1",
Sample_real == "CCGCATA" ~ "aggR1_1",Sample_real == "CGGATGA" ~ "Negative3",Sample_real == "ACGGAAC" ~ "stx130_1", Sample_real == "ACGTCAT" ~ "stx1158_1",Sample_real == "CAGTAGG" ~ "bfpA8_2",
Sample_real == "TCTGGAA" ~ "invE13_2", Sample_real == "GTCGTAT" ~ "eltA7_3", Sample_real == "TCCTCAT" ~ "eltA45_10",Sample_real == "GTGCTAT" ~ "eltB1_2",Sample_real == "AACCAAG" ~ "eltB23_18",
Sample_real == "TCGTACA" ~ "estIa9_4",Sample_real == "TGCCCAA" ~ "estIa15_15", Sample_real == "ACACGTG" ~ "bfpF5_6",Sample_real == "TGGGTGA" ~ "bfpF10_5",Sample_real == "TAGAACG" ~ "aafA8_3",
Sample_real == "GTCCTCT" ~ "Negative4", Sample_real == "GCCTATA" ~ "aap22_3", Sample_real == "AACAGTG" ~ "aaiC1_7",Sample_real == "TGTGAAC" ~ "aaiC4_7",Sample_real == "AAGCACA" ~ "uidA1_60",
Sample_real == "TGACTCT" ~ "uidA6_16", Sample_real == "AACCGCT" ~ "gadph1_95", Sample_real == "TATGCAG" ~ "arpA1_9",Sample_real == "CCATCTC" ~ "chuA2_4",Sample_real == "GGTCATG" ~ "trpA35_4",
Sample_real == "ATAGAGC" ~ "Tsp1_9", Sample_real == "CACAGAT" ~ "yjaA1_2", Sample_real == "GTGTCCT" ~ "00_HH26H",Sample_real == "TCTTCGT" ~ "00_HH24CH",Sample_real == "ATCCAGT" ~ "00_HH08C",
Sample_real == "AAACCCT" ~ "00_358190-18", Sample_real == "TAGAGCG" ~ "00_Klebsiella pneuomniae", Sample_real == "TTCCAGG" ~ "00_215",Sample_real == "AGTCGTG" ~ "00_HH16H",Sample_real == "GAACTGA" ~ "00_HH20S",
Sample_real == "GGACCTA" ~ "00_327", Sample_real == "CGCATAC" ~ "00_HH15CH", Sample_real == "ACAGGAT" ~ "00_HH36S",Sample_real == "GATATCG" ~ "00_HH13H",Sample_real == "CCATTCA" ~ "00_25",
Sample_real == "GTTGCTA" ~ "00_346", Sample_real == "CTGGTAC" ~ "00_94", Sample_real == "ACTGTGT" ~ "00_263",Sample_real == "AAAAGGC" ~ "00_39",Sample_real == "ACAAAGC" ~ "00_14",
Sample_real == "GTCTTCT" ~ "00_207", Sample_real == "CCACTAG" ~ "00_G1_Alt2_Feb", Sample_real == "TAGATGA" ~ "00_Chur2_liquid",Sample_real == "ACGTTGC" ~ "00_B2_liquid",Sample_real == "CGTTTCA" ~ "00_B1_liquid",
Sample_real == "TAAGATA" ~ "mcr_28b", Sample_real == "TGTATGT" ~ "aadA_21b", Sample_real == "ATCATTA" ~ "bfpF10_5b",Sample_real == "TCGCTAG" ~ "stx130_1b",Sample_real == "ACATTCA" ~ "00_39b",
Sample_real == "GAACACA" ~ "PCR_Neg"))
#Only complementary DNA templates (no barcodes)---------------------
#Import results
setwd("~/switchdrive/Institution/dMLA/08_AMR_VFs_Phylo_dMLA/Eurofins/20230503_Order_Tube2")
options(max.print=999999)
reads <- read.csv("20230503_sequencing_targets_noBarcodes_Tube2.csv", header= TRUE) #--->total dataset
reads
reads <- reads %>%
mutate(Sample = as.character(X1)) %>%
mutate(Sample = case_when(
Sample == "ATGGTTG" ~ "A1", Sample == "TATCGTC" ~ "A2",Sample == "CCGACAT" ~ "A3", Sample == "GGTCTTG" ~ "A4",Sample == "AGCTGTA" ~ "A5",
Sample == "AACACCT" ~ "A6",Sample == "CACGTTT" ~ "A7",Sample == "GATCGTT" ~ "A8",Sample == "CATACGT" ~ "A9", Sample == "TTGCTAC" ~ "A10",
Sample == "GTTCTGG" ~ "A11",Sample == "CAATCAC" ~ "A12",Sample == "CTGCTGT" ~ "B1",Sample == "ATCCTCG" ~ "B2", Sample == "AGCAAAC" ~ "B3",
Sample == "GCACTTT" ~ "B4", Sample == "CTGACAC" ~ "B5",Sample == "GCAAATG" ~ "B6",Sample == "GTTTCGG" ~ "B7",Sample == "CTACGTT" ~ "B8",
Sample == "GAATCGA" ~ "B9", Sample == "TACCTTC" ~ "B10", Sample == "GCCATAC" ~ "B11",Sample == "GCAACGA" ~ "B12",Sample == "TGCAAAC" ~ "C1",
Sample == "TGCATCC" ~ "C2",Sample == "GTGATAC" ~ "C3",Sample == "ACCAGAT" ~ "C4",Sample == "CTTTCCA" ~ "C5",Sample == "CATCGGT" ~ "C6",
Sample == "GATTGGC" ~ "C7", Sample == "TCGCGTT" ~ "C8", Sample == "CGATCAC" ~ "C9",Sample == "CATGAAG" ~ "C10",Sample == "GCTTTCT" ~ "C11",
Sample == "AATGCCT" ~ "C12",Sample == "TGTAGGG" ~ "D1",Sample == "AGAAGAC" ~ "D2",Sample == "AACGTGT" ~ "D3",Sample == "GTGAAGA" ~ "D4",
Sample == "CCGCATA" ~ "D5",Sample == "CGGATGA" ~ "D6",Sample == "ACGGAAC" ~ "D7", Sample == "ACGTCAT" ~ "D8",Sample == "CAGTAGG" ~ "D9",
Sample == "TCTGGAA" ~ "D10", Sample == "GTCGTAT" ~ "D11", Sample == "TCCTCAT" ~ "D12",Sample == "GTGCTAT" ~ "E1",Sample == "AACCAAG" ~ "E2",
Sample == "TCGTACA" ~ "E3",Sample == "TGCCCAA" ~ "E4", Sample == "ACACGTG" ~ "E5",Sample == "TGGGTGA" ~ "E6",Sample == "TAGAACG" ~ "E7",
Sample == "GTCCTCT" ~ "E8", Sample == "GCCTATA" ~ "E9", Sample == "AACAGTG" ~ "E10",Sample == "TGTGAAC" ~ "E11",Sample == "AAGCACA" ~ "E12",
Sample == "TGACTCT" ~ "F1", Sample == "AACCGCT" ~ "F2", Sample == "TATGCAG" ~ "F3",Sample == "CCATCTC" ~ "F4",Sample == "GGTCATG" ~ "F5",
Sample == "ATAGAGC" ~ "F6", Sample == "CACAGAT" ~ "F7", Sample == "GTGTCCT" ~ "F8",Sample == "TCTTCGT" ~ "F9",Sample == "ATCCAGT" ~ "F10",
Sample == "AAACCCT" ~ "F11", Sample == "TAGAGCG" ~ "F12", Sample == "TTCCAGG" ~ "G1",Sample == "AGTCGTG" ~ "G2",Sample == "GAACTGA" ~ "G3",
Sample == "GGACCTA" ~ "G4", Sample == "CGCATAC" ~ "G5", Sample == "ACAGGAT" ~ "G6",Sample == "GATATCG" ~ "G7",Sample == "CCATTCA" ~ "G8",
Sample == "GTTGCTA" ~ "G9", Sample == "CTGGTAC" ~ "G10", Sample == "ACTGTGT" ~ "G11",Sample == "AAAAGGC" ~ "G12",Sample == "ACAAAGC" ~ "H1",
Sample == "GTCTTCT" ~ "H2", Sample == "CCACTAG" ~ "H3", Sample == "TAGATGA" ~ "H4",Sample == "ACGTTGC" ~ "H5",Sample == "CGTTTCA" ~ "H6",
Sample == "TAAGATA" ~ "H7", Sample == "TGTATGT" ~ "H8", Sample == "ATCATTA" ~ "H9",Sample == "TCGCTAG" ~ "H10",Sample == "ACATTCA" ~ "H11",
Sample == "GAACACA" ~ "H12"))
reads <- reads %>%
mutate(Sample_real = as.character(X1)) %>%
mutate(Sample_real = case_when(
Sample_real == "ATGGTTG" ~ "mcr28", Sample_real == "TATCGTC" ~ "mcr64",Sample_real == "CCGACAT" ~ "aadA1", Sample_real == "GGTCTTG" ~ "aadA21",Sample_real == "AGCTGTA" ~ "aadA57",
Sample_real == "AACACCT" ~ "aac3II63",Sample_real == "CACGTTT" ~ "aac3VI23",Sample_real == "GATCGTT" ~ "aac6I6",Sample_real == "CATACGT" ~ "aac6I123", Sample_real == "TTGCTAC" ~ "ant2Ia1",
Sample_real == "GTTCTGG" ~ "aph6I29",Sample_real == "CAATCAC" ~ "aph3386",Sample_real == "CTGCTGT" ~ "qnrB7",Sample_real == "ATCCTCG" ~ "zNegative1", Sample_real == "AGCAAAC" ~ "qnrB35",
Sample_real == "GCACTTT" ~ "qnrS1", Sample_real == "CTGACAC" ~ "ermB1",Sample_real == "GCAAATG" ~ "mphA18",Sample_real == "GTTTCGG" ~ "dfrA243",Sample_real == "CTACGTT" ~ "dfrA369",
Sample_real == "GAATCGA" ~ "dfrA15", Sample_real == "TACCTTC" ~ "dfrA58", Sample_real == "GCCATAC" ~ "dfrA1",Sample_real == "GCAACGA" ~ "sul15",Sample_real == "TGCAAAC" ~ "sul22",
Sample_real == "TGCATCC" ~ "sul336",Sample_real == "GTGATAC" ~ "tetA13",Sample_real == "ACCAGAT" ~ "zNegative2",Sample_real == "CTTTCCA" ~ "tetB43",Sample_real == "CATCGGT" ~ "tetM34",
Sample_real == "GATTGGC" ~ "intI125", Sample_real == "TCGCGTT" ~ "astA13", Sample_real == "CGATCAC" ~ "aatA22",Sample_real == "CATGAAG" ~ "aatA12314",Sample_real == "GCTTTCT" ~ "ipaH321",
Sample_real == "AATGCCT" ~ "ipaH921",Sample_real == "TGTAGGG" ~ "eae111",Sample_real == "AGAAGAC" ~ "eae6271",Sample_real == "AACGTGT" ~ "stx2181",Sample_real == "GTGAAGA" ~ "stx23291",
Sample_real == "CCGCATA" ~ "aggR11",Sample_real == "CGGATGA" ~ "zNegative3",Sample_real == "ACGGAAC" ~ "stx1301", Sample_real == "ACGTCAT" ~ "stx11581",Sample_real == "CAGTAGG" ~ "bfpA82",
Sample_real == "TCTGGAA" ~ "invE132", Sample_real == "GTCGTAT" ~ "eltA73", Sample_real == "TCCTCAT" ~ "eltA4510",Sample_real == "GTGCTAT" ~ "eltB12",Sample_real == "AACCAAG" ~ "eltB2318",
Sample_real == "TCGTACA" ~ "estIa94",Sample_real == "TGCCCAA" ~ "estIa1515", Sample_real == "ACACGTG" ~ "bfpF56",Sample_real == "TGGGTGA" ~ "bfpF105",Sample_real == "TAGAACG" ~ "aafA83",
Sample_real == "GTCCTCT" ~ "zNegative4", Sample_real == "GCCTATA" ~ "aap223", Sample_real == "AACAGTG" ~ "aaiC17",Sample_real == "TGTGAAC" ~ "aaiC47",Sample_real == "AAGCACA" ~ "uidA160",
Sample_real == "TGACTCT" ~ "uidA616", Sample_real == "AACCGCT" ~ "gadph195", Sample_real == "TATGCAG" ~ "arpA19",Sample_real == "CCATCTC" ~ "chuA24",Sample_real == "GGTCATG" ~ "trpA354",
Sample_real == "ATAGAGC" ~ "Tsp19", Sample_real == "CACAGAT" ~ "yjaA12", Sample_real == "GTGTCCT" ~ "00HH26H",Sample_real == "TCTTCGT" ~ "00HH24CH",Sample_real == "ATCCAGT" ~ "00HH08C",
Sample_real == "AAACCCT" ~ "00358190-18", Sample_real == "TAGAGCG" ~ "00Klebsiella pneuomniae", Sample_real == "TTCCAGG" ~ "00215",Sample_real == "AGTCGTG" ~ "00HH16H",Sample_real == "GAACTGA" ~ "00HH20S",
Sample_real == "GGACCTA" ~ "00327", Sample_real == "CGCATAC" ~ "00HH15CH", Sample_real == "ACAGGAT" ~ "00HH36S",Sample_real == "GATATCG" ~ "00HH13H",Sample_real == "CCATTCA" ~ "0025",
Sample_real == "GTTGCTA" ~ "00346", Sample_real == "CTGGTAC" ~ "0094", Sample_real == "ACTGTGT" ~ "00263",Sample_real == "AAAAGGC" ~ "0039",Sample_real == "ACAAAGC" ~ "0014",
Sample_real == "GTCTTCT" ~ "00207", Sample_real == "CCACTAG" ~ "00G1Alt2Feb", Sample_real == "TAGATGA" ~ "00Chur2liquid",Sample_real == "ACGTTGC" ~ "00B2liquid",Sample_real == "CGTTTCA" ~ "00B1liquid",
Sample_real == "TAAGATA" ~ "mcr28", Sample_real == "TGTATGT" ~ "aadA21b", Sample_real == "ATCATTA" ~ "bfpF105b",Sample_real == "TCGCTAG" ~ "stx1301b",Sample_real == "ACATTCA" ~ "0039b",
Sample_real == "GAACACA" ~ "PCRNeg"))
#Distribution of reads------------------
##Filter of rows whit positive
filtered_reads <- reads %>%
filter(as.character(X2) != as.character(Sample_real))
#Plot distribution of false positive for each target
ggplot(filtered_reads, aes(x=n)) +
geom_histogram() +
theme_minimal() +
labs(title="Distribution of of false positive read counts for each probe-pair (Tube2)",
x="n",
y="Frequency") +
theme(legend.title = element_blank())+
facet_wrap(X2 ~ ., ncol = 10, scales="free")
#Calculate the 99.9% quantile of the gamma distribution of each the false positive for each target as threshold
# Assuming 'filtered_reads' is your dataframe with columns 'n' and 'X2'
results_threshold <- filtered_reads %>%
group_by(X2) %>%
summarise(
mean_data = mean(n),
var_data = var(n)
) %>%
mutate(
shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.999, shape = shape_estimate, rate = rate_estimate)
)
#Join results_threshold and reads dataframe to calculate calculate real_n
reads <- reads %>%
left_join(results_threshold %>% dplyr::select(X2, quantile_99_9), by = "X2")
# Subtract quantile_99_9 from n to create the new variable real_n
reads <- reads %>%
mutate(real_n = ifelse(n - quantile_99_9 < 0, 0, n - quantile_99_9))
reads[reads == 0] <- NA
#<1000
ggplot(complete(reads, X2, Sample_real), aes(X2, Sample_real)) +
geom_tile(aes(fill = case_when(
is.na(real_n) ~ "gray95",
real_n > 0 & real_n <= 1 ~ "red",
real_n > 1 & real_n <= 100 ~ "darkorange",
real_n > 100 & real_n <= 1000 ~ "gold1",# Assuming you want to include 1 in the range
TRUE ~ "black"
)), colour = "white") +
labs(title = "Multiplex-testing - Tube 2", x = "Probe-pair", y = "Sample") +
scale_fill_manual(values = c("gray95" = "gray95", "black" = "black", "red" = "red", "darkorange"="darkorange", "gold1"="gold1"), guide = "none") +
theme(axis.text.x = element_text(size = 8, angle = 90),
axis.text.y = element_text(size = 6.5))
##Formatting df------
#Import results
setwd("~/Desktop/dmla-amr-vfs/data")
reads <- read.csv("20230725_sequencing_targets_all_noPCRneg.csv", header = TRUE)
reads
#Assign barcodes to samples
reads <- reads %>%
mutate(Sample = as.character(X1)) %>%
mutate(Sample = case_when(
Sample == "GAACACA" ~ "A1", Sample == "ACATTCA" ~ "A2",Sample == "TCGCTAG" ~ "A3", Sample == "ATCATTA" ~ "A4",Sample == "TGTATGT" ~ "A5",
Sample == "TAAGATA" ~ "A6",Sample == "CGTTTCA" ~ "A7",Sample == "ACGTTGC" ~ "A8",Sample == "TAGATGA" ~ "A9", Sample == "CCACTAG" ~ "A10",
Sample == "GTCTTCT" ~ "A11",Sample == "ACAAAGC" ~ "A12",Sample == "AAAAGGC" ~ "B1",Sample == "ACTGTGT" ~ "B2", Sample == "CTGGTAC" ~ "B3",
Sample == "GTTGCTA" ~ "B4", Sample == "CCATTCA" ~ "B5",Sample == "GATATCG" ~ "B6",Sample == "ACAGGAT" ~ "B7",Sample == "CGCATAC" ~ "B8",
Sample == "GGACCTA" ~ "B9", Sample == "GAACTGA" ~ "B10", Sample == "AGTCGTG" ~ "B11",Sample == "TTCCAGG" ~ "B12",Sample == "TAGAGCG" ~ "C1",
Sample == "AAACCCT" ~ "C2",Sample == "ATCCAGT" ~ "C3",Sample == "TCTTCGT" ~ "C4",Sample == "GTGTCCT" ~ "C5",Sample == "CACAGAT" ~ "C6",
Sample == "ATAGAGC" ~ "C7", Sample == "GGTCATG" ~ "C8", Sample == "CCATCTC" ~ "C9",Sample == "TATGCAG" ~ "C10",Sample == "AACCGCT" ~ "C11",
Sample == "TGACTCT" ~ "C12",Sample == "AAGCACA" ~ "D1",Sample == "TGTGAAC" ~ "D2",Sample == "AACAGTG" ~ "D3",Sample == "GCCTATA" ~ "D4",
Sample == "GTCCTCT" ~ "D5",Sample == "TAGAACG" ~ "D6",Sample == "TGGGTGA" ~ "D7", Sample == "ACACGTG" ~ "D8",Sample == "TGCCCAA" ~ "D9",
Sample == "TCGTACA" ~ "D10", Sample == "AACCAAG" ~ "D11", Sample == "GTGCTAT" ~ "D12",Sample == "TCCTCAT" ~ "E1",Sample == "GTCGTAT" ~ "E2",
Sample == "TCTGGAA" ~ "E3",Sample == "CAGTAGG" ~ "E4", Sample == "ACGTCAT" ~ "E5",Sample == "ACGGAAC" ~ "E6",Sample == "CGGATGA" ~ "E7",
Sample == "CCGCATA" ~ "E8", Sample == "GTGAAGA" ~ "E9", Sample == "AACGTGT" ~ "E10",Sample == "AGAAGAC" ~ "E11",Sample == "TGTAGGG" ~ "E12",
Sample == "AATGCCT" ~ "F1", Sample == "GCTTTCT" ~ "F2", Sample == "CATGAAG" ~ "F3",Sample == "CGATCAC" ~ "F4",Sample == "TCGCGTT" ~ "F5",
Sample == "GATTGGC" ~ "F6", Sample == "CATCGGT" ~ "F7", Sample == "CTTTCCA" ~ "F8",Sample == "ACCAGAT" ~ "F9",Sample == "GTGATAC" ~ "F10",
Sample == "TGCATCC" ~ "F11", Sample == "TGCAAAC" ~ "F12", Sample == "GCAACGA" ~ "G1",Sample == "GCCATAC" ~ "G2",Sample == "TACCTTC" ~ "G3",
Sample == "GAATCGA" ~ "G4", Sample == "CTACGTT" ~ "G5", Sample == "GTTTCGG" ~ "G6",Sample == "GCAAATG" ~ "G7",Sample == "CTGACAC" ~ "G8",
Sample == "GCACTTT" ~ "G9", Sample == "AGCAAAC" ~ "G10", Sample == "ATCCTCG" ~ "G11",Sample == "CTGCTGT" ~ "G12",Sample == "CAATCAC" ~ "H1",
Sample == "GTTCTGG" ~ "H2", Sample == "TTGCTAC" ~ "H3", Sample == "CATACGT" ~ "H4",Sample == "GATCGTT" ~ "H5",Sample == "CACGTTT" ~ "H6",
Sample == "AACACCT" ~ "H7", Sample == "AGCTGTA" ~ "H8", Sample == "GGTCTTG" ~ "H9",Sample == "CCGACAT" ~ "H10",Sample == "TATCGTC" ~ "H11",
Sample == "ATGGTTG" ~ "H12"))
reads <- reads %>%
mutate(Sample_real = as.character(X1)) %>%
mutate(Sample_real = case_when(
Sample_real == "GAACACA" ~ "empty", Sample_real == "ACATTCA" ~ "HH03C_1",Sample_real == "TCGCTAG" ~ "HH03CH_1", Sample_real == "ATCATTA" ~ "HH03H_1",Sample_real == "TGTATGT" ~ "HH03S_1",
Sample_real == "TAAGATA" ~ "HH08C_1",Sample_real == "CGTTTCA" ~ "HH08CH_1",Sample_real == "ACGTTGC" ~ "HH08H_1",Sample_real == "TAGATGA" ~ "HH13C_1", Sample_real == "CCACTAG" ~ "HH13CH_1",
Sample_real == "GTCTTCT" ~ "HH13H_1",Sample_real == "ACAAAGC" ~ "HH13S_1",Sample_real == "AAAAGGC" ~ "HH14C_1",Sample_real == "ACTGTGT" ~ "Negative1", Sample_real == "CTGGTAC" ~ "HH14CH_1",
Sample_real == "GTTGCTA" ~ "HH14H_1", Sample_real == "CCATTCA" ~ "HH14S_1",Sample_real == "GATATCG" ~ "HH15C_1",Sample_real == "ACAGGAT" ~ "HH15CH_1",Sample_real == "CGCATAC" ~ "HH15H_1",
Sample_real == "GGACCTA" ~ "HH16C_1", Sample_real == "GAACTGA" ~ "HH16CH_1", Sample_real == "AGTCGTG" ~ "HH16H_1",Sample_real == "TTCCAGG" ~ "HH16S_1",Sample_real == "TAGAGCG" ~ "HH17C_1",
Sample_real == "AAACCCT" ~ "HH17CH_1",Sample_real == "ATCCAGT" ~ "HH17H_1",Sample_real == "TCTTCGT" ~ "Negative2",Sample_real == "GTGTCCT" ~ "HH17S_1",Sample_real == "CACAGAT" ~ "HH18C_1",
Sample_real == "ATAGAGC" ~ "HH18CH_1", Sample_real == "GGTCATG" ~ "HH18H_1", Sample_real == "CCATCTC" ~ "HH18S_1",Sample_real == "TATGCAG" ~ "HH03C_2",Sample_real == "AACCGCT" ~ "HH03CH_2",
Sample_real == "TGACTCT" ~ "HH03H_2",Sample_real == "AAGCACA" ~ "HH03S_2",Sample_real == "TGTGAAC" ~ "HH08C_2",Sample_real == "AACAGTG" ~ "HH08CH_2",Sample_real == "GCCTATA" ~ "HH08H_2",
Sample_real == "GTCCTCT" ~ "HH13C_2",Sample_real == "TAGAACG" ~ "Negative3",Sample_real == "TGGGTGA" ~ "HH13CH_2", Sample_real == "ACACGTG" ~ "HH13H_2",Sample_real == "TGCCCAA" ~ "HH13S_2",
Sample_real == "TCGTACA" ~ "HH14C_2", Sample_real == "AACCAAG" ~ "HH14CH_2", Sample_real == "GTGCTAT" ~ "HH14H_2",Sample_real == "TCCTCAT" ~ "HH14S_2",Sample_real == "GTCGTAT" ~ "HH15C_2",
Sample_real == "TCTGGAA" ~ "HH15CH_2",Sample_real == "CAGTAGG" ~ "HH15H_2", Sample_real == "ACGTCAT" ~ "HH16C_2",Sample_real == "ACGGAAC" ~ "HH16CH_2",Sample_real == "CGGATGA" ~ "HH16H_2",
Sample_real == "CCGCATA" ~ "Negative4", Sample_real == "GTGAAGA" ~ "HH16S_2", Sample_real == "AACGTGT" ~ "HH17C_2",Sample_real == "AGAAGAC" ~ "HH17CH_2",Sample_real == "TGTAGGG" ~ "HH17H_2",
Sample_real == "AATGCCT" ~ "HH17S_2", Sample_real == "GCTTTCT" ~ "HH18C_2", Sample_real == "CATGAAG" ~ "HH18CH_2",Sample_real == "CGATCAC" ~ "HH18H_2",Sample_real == "TCGCGTT" ~ "HH18S_2",
Sample_real == "GATTGGC" ~ "HH03C_3", Sample_real == "CATCGGT" ~ "HH03CH_3", Sample_real == "CTTTCCA" ~ "HH03H_3",Sample_real == "ACCAGAT" ~ "HH03S_3",Sample_real == "GTGATAC" ~ "HH08C_3",
Sample_real == "TGCATCC" ~ "HH08CH_3", Sample_real == "TGCAAAC" ~ "HH08H_3", Sample_real == "GCAACGA" ~ "HH13C_3",Sample_real == "GCCATAC" ~ "HH13CH_3",Sample_real == "TACCTTC" ~ "HH13H_3",
Sample_real == "GAATCGA" ~ "HH13S_3", Sample_real == "CTACGTT" ~ "HH14C_3", Sample_real == "GTTTCGG" ~ "HH14CH_3",Sample_real == "GCAAATG" ~ "HH14H_3",Sample_real == "CTGACAC" ~ "HH14S_3",
Sample_real == "GCACTTT" ~ "HH15C_3", Sample_real == "AGCAAAC" ~ "HH15CH_3", Sample_real == "ATCCTCG" ~ "HH15H_3",Sample_real == "CTGCTGT" ~ "HH16C_3",Sample_real == "CAATCAC" ~ "HH16CH_3",
Sample_real == "GTTCTGG" ~ "HH16H_3", Sample_real == "TTGCTAC" ~ "HH16S_3", Sample_real == "CATACGT" ~ "HH17C_3",Sample_real == "GATCGTT" ~ "HH17CH_3",Sample_real == "CACGTTT" ~ "HH17H_3",
Sample_real == "AACACCT" ~ "HH17S_3", Sample_real == "AGCTGTA" ~ "HH18C_3", Sample_real == "GGTCTTG" ~ "HH18CH_3",Sample_real == "CCGACAT" ~ "HH18H_3",Sample_real == "TATCGTC" ~ "HH18S_3",
Sample_real == "ATGGTTG" ~ "PCR_Neg"))
#Distribution of reads------------------
##Filter of rows whit positive
filtered_reads = reads[reads$Sample_real %in% c("Negative1", "Negative2", "Negative3", "Negative4","PCR_Neg"), ]
#Plot distribution of false positive for each target
ggplot(filtered_reads, aes(x=n)) +
geom_histogram() +
theme_minimal() +
labs(title="Distribution of of false positive read counts for each probe-pair (Tube2)",
x="n",
y="Frequency") +
theme(legend.title = element_blank())+
facet_wrap(X2 ~ ., ncol = 10, scales="free")
#Calculate the 99.9% quantile of the gamma distribution of each the false positive for each target as threshold
# Assuming 'filtered_reads' is your dataframe with columns 'n' and 'X2'
results_threshold <- filtered_reads %>%
group_by(X2) %>%
summarise(
mean_data = mean(n),
var_data = var(n)
) %>%
mutate(
shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.999, shape = shape_estimate, rate = rate_estimate)
)
# Step 1: Calculate a fallback value for each X2 in filtered_reads
fallback_values <- filtered_reads %>%
group_by(X2) %>%
summarise(fallback_n = max(n), .groups = 'drop') # Using max, adjust as needed
# Step 2: Join fallback_values with results_threshold
results_threshold <- results_threshold %>%
left_join(fallback_values, by = "X2")
# Step 3: Replace NA in quantile_99_9 with fallback_n
results_threshold <- results_threshold %>%
mutate(
quantile_99_9 = ifelse(is.na(quantile_99_9), fallback_n, quantile_99_9)
) %>%
dplyr::select(-fallback_n) # Removing fallback_n to clean up the dataframe
#Join results_threshold and reads dataframe to calculate calculate real_n
reads <- reads %>%
left_join(results_threshold %>% dplyr::select(X2, quantile_99_9), by = "X2")
# Subtract quantile_99_9 from n to create the new variable real_n
reads <- reads %>%
mutate(real_n = ifelse(n - quantile_99_9 < 0, 0, n - quantile_99_9))
reads[reads == 0] <- NA
#<1000
ggplot(complete(reads, X2, Sample_real), aes(X2, Sample_real)) +
geom_tile(aes(fill = case_when(
is.na(real_n) ~ "gray95",
real_n > 0 & real_n <= 1 ~ "red",
real_n > 1 & real_n <= 100 ~ "darkorange",
real_n > 100 & real_n <= 1000 ~ "gold1",# Assuming you want to include 1 in the range
TRUE ~ "black"
)), colour = "white") +
labs(title = "Multiplex-testing on Bangladesh strains, wihtout considering PCR Neg 99.9", x = "Probe-pair", y = "Sample") +
scale_fill_manual(values = c("gray95" = "gray95", "black" = "black", "red" = "red", "darkorange"="darkorange", "gold1"="gold1"), guide = "none") +
theme(axis.text.x = element_text(size = 8, angle = 90),
axis.text.y = element_text(size = 6.5))
View(reads)
#Test for Gamma distribution
fit_results <- filtered_reads %>%
group_by(X2) %>%
do(fit = fitdist(.$n, distr = "gamma", method = "mle")) %>%
ungroup()
View(filtered_reads)
fit_results <- filtered_reads %>%
group_by(X2)
#Test for Gamma distribution
filtered_reads <- filtered_reads %>%
mutate(n = as.numeric(n)) %>%
group_by(X2) %>%
filter(n() > 1)
fit_results <- filtered_reads %>%
group_by(X2) %>%
do(fit = fitdist(.$n, distr = "gamma", method = "mle")) %>%
ungroup()
fit_results <- filtered_reads %>%
group_by(X2) %>%
summarise(fit = list(fitdist(n, distr = "gamma", method = "mle")), .groups = 'keep')
#Distribution of reads------------------
##Filter of rows whit positive
filtered_reads <- reads %>%
filter(as.character(X2) != as.character(Sample_real))
#Test for Gamma distribution
filtered_reads <- filtered_reads %>%
mutate(n = as.numeric(n)) %>%
group_by(X2) %>%
filter(n() > 1)
fit_results <- filtered_reads %>%
group_by(X2) %>%
summarise(fit = list(fitdist(n, distr = "gamma", method = "mle")), .groups = 'keep')
View(filtered_reads)
try_fit_gamma <- function(data) {
tryCatch({
fitdist(data, distr = "gamma", method = "mle")
}, error = function(e) {
return(NULL)  # Return NULL if the fitting fails
})
}
# Apply fitting within the summarise after filtering out inappropriate groups
fit_results <- filtered_reads %>%
group_by(X2) %>%
# Filter out groups with non-positive values or not enough data
filter(all(n > 0) & n() > 1) %>%
summarise(fit = list(try_fit_gamma(n)), .groups = 'drop')
# Check the fit results and extract the parameters if the fit was successful
fit_parameters <- fit_results %>%
rowwise() %>%
# Extract parameters if fit is not NULL
summarise(
shape = if (!is.null(fit[[1]])) fit[[1]]$estimate["shape"] else NA,
rate = if (!is.null(fit[[1]])) fit[[1]]$estimate["rate"] else NA,
.groups = 'drop'
)
fit_results <- filtered_reads %>%
group_by(X2) %>%
summarise(fit = list(fitdist(n, distr = "gamma", method = "mle")), .groups = 'keep')
#Test for Gamma distribution
ad_test_for_group <- function(data) {
# Perform the Anderson-Darling test if data length is sufficient
if (length(data) > 7) { # The ad.test requires at least 8 observations to work
test <- ad.test(data)
p.value <- test$p.value
} else {
p.value <- NA # Not enough data to perform the test
}
return(p.value)
}
# Apply the function to each target X2
ad_test_results <- filtered_reads %>%
group_by(X2) %>%
summarise(ad_p_value = ad_test_for_group(n), .groups = 'drop')
library(fitdistrplus)
#Test for Gamma distribution
if (!require(nortest)) install.packages("nortest")
library(nortest)
ad_test_for_group <- function(data) {
# Perform the Anderson-Darling test if data length is sufficient
if (length(data) > 7) { # The ad.test requires at least 8 observations to work
test <- ad.test(data)
p.value <- test$p.value
} else {
p.value <- NA # Not enough data to perform the test
}
return(p.value)
}
# Apply the function to each target X2
ad_test_results <- filtered_reads %>%
group_by(X2) %>%
summarise(ad_p_value = ad_test_for_group(n), .groups = 'drop')
# View the results
print(ad_test_results)
View(ad_test_results)
