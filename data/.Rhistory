Sample_real == "TGACTCT" ~ "72_1",Sample_real == "AAGCACA" ~ "73_1",Sample_real == "TGTGAAC" ~ "75_1",Sample_real == "AACAGTG" ~ "76_1",Sample_real == "GCCTATA" ~ "77_1",
Sample_real == "GTCCTCT" ~ "zNegative_4",Sample_real == "TAGAACG" ~ "48_2",Sample_real == "TGGGTGA" ~ "49_2", Sample_real == "ACACGTG" ~ "50_2",Sample_real == "TGCCCAA" ~ "51_2",
Sample_real == "TCGTACA" ~ "52_2", Sample_real == "AACCAAG" ~ "53_2", Sample_real == "GTGCTAT" ~ "54_2",Sample_real == "TCCTCAT" ~ "zNegative_5",Sample_real == "GTCGTAT" ~ "55_2",
Sample_real == "TCTGGAA" ~ "56_2",Sample_real == "CAGTAGG" ~ "57_2", Sample_real == "ACGTCAT" ~ "58_2",Sample_real == "ACGGAAC" ~ "59_2",Sample_real == "CGGATGA" ~ "60_2",
Sample_real == "CCGCATA" ~ "61_2", Sample_real == "GTGAAGA" ~ "zNegative_6", Sample_real == "AACGTGT" ~ "62_2",Sample_real == "AGAAGAC" ~ "63_2",Sample_real == "TGTAGGG" ~ "64_2",
Sample_real == "AATGCCT" ~ "65_2", Sample_real == "GCTTTCT" ~ "66_2", Sample_real == "CATGAAG" ~ "68_2",Sample_real == "CGATCAC" ~ "69_2",Sample_real == "TCGCGTT" ~ "zNegative_7",
Sample_real == "GATTGGC" ~ "aggR11_1", Sample_real == "CATCGGT" ~ "71_2", Sample_real == "CTTTCCA" ~ "72_2",Sample_real == "ACCAGAT" ~ "73_2",Sample_real == "GTGATAC" ~ "75_2",
Sample_real == "TGCATCC" ~ "76_2", Sample_real == "TGCAAAC" ~ "77_2", Sample_real == "GCAACGA" ~ "zNegative_8",Sample_real == "GCCATAC" ~ "70_2",Sample_real == "TACCTTC" ~ "aggR11_2",
Sample_real == "GAATCGA" ~ "aaiC47_1", Sample_real == "CTACGTT" ~ "aaiC47_2", Sample_real == "GTTTCGG" ~ "zPCRNeg_1",Sample_real == "GCAAATG" ~ "zPCRNeg_2"))
##Distribution of reads------------------
##Filter of negative samples containing positive
# Define the list of negative samples
negative_samples <- c("zNegative_1", "zNegative_2", "zNegative_3", "zNegative_4",
"zNegative_5", "zNegative_6", "zNegative_7", "zNegative_8",
"zPCRNeg_1", "zPCRNeg_2")
# Filter the dataframe
filtered_reads <- reads %>%
filter(Sample_real %in% negative_samples |
(Sample_real %in% c("aggR11_1", "aggR11_2") & X2 != "aggR11") |
(Sample_real %in% c("aaiC47_1", "aaiC47_2") & X2 != "aaiC47"))
#Plot distribution of false positive for each target
ggplot(filtered_reads, aes(x=n)) +
geom_histogram() +
theme_minimal() +
labs(title="Distribution of of false positive read counts for each probe-pair - Set 2 E. coli isolates",
x="n",
y="Frequency") +
theme(legend.title = element_blank())+
facet_wrap(X2 ~ ., ncol = 10, scales="free")
##Threshold calculation------------------
#Calculate the 99.9% quantile of the gamma distribution of each the false positive for each target as threshold
# Assuming 'filtered_reads' is your dataframe with columns 'n' and 'X2'
results_threshold <- filtered_reads %>%
group_by(X2) %>%
dplyr::summarise(
mean_data = mean(n),
var_data = var(n),
.groups = 'drop'
) %>%
mutate(
shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.999, shape = shape_estimate, rate = rate_estimate)
)
# Calculate the maximum n value for each X2 in filtered_reads
max_n_values <- filtered_reads %>%
group_by(X2) %>%
dplyr::summarise(max_n_in_negatives = max(n, na.rm = TRUE), .groups = 'drop')
# Replace Inf or NA values in quantile_99_9 with the highest n value from filtered_reads
results_threshold <- results_threshold %>%
left_join(max_n_values, by = "X2") %>%
mutate(
quantile_99_9 = ifelse(is.infinite(quantile_99_9) | is.na(quantile_99_9), max_n_in_negatives, quantile_99_9)
)
# Join the quantile data with the original dataframe, set quantile_99_9 to 0 for missing values
reads_with_threshold <- reads %>%
left_join(results_threshold %>% select(X2, quantile_99_9), by = "X2") %>%
mutate(quantile_99_9 = ifelse(is.na(quantile_99_9), 0, quantile_99_9))
# Calculate the real count
reads_with_threshold <- reads_with_threshold %>%
mutate(real_n = n - quantile_99_9)
# Ensure real_n does not go below 0
reads_with_threshold <- reads_with_threshold %>%
mutate(real_n = ifelse(real_n < 0, 0, real_n))
reads <- reads_with_threshold
reads[reads == 0] <- NA
##Import WGS results file-----
wgs <- read.csv("wgs_results_ecoli_set2.csv", header = TRUE)
wgs$isolate=as.character(wgs$isolate)
# Remove the _1 and _2 suffixes from Sample_real in reads for comparison
reads <- reads %>%
mutate(Sample_real_clean = sub("_[12]$", "", Sample_real))
# Create a new column in reads called 'wgs' with the specified conditions
reads <- reads %>%
rowwise() %>%
mutate(
wgs = case_when(
any(wgs$isolate == Sample_real_clean & wgs$probe == X2) & !is.na(real_n) ~ "y",   # Present in both with valid real_n
!any(wgs$isolate == Sample_real_clean & wgs$probe == X2) & !is.na(real_n) ~ "n",  # Not present in wgs but real_n is valid
any(wgs$isolate == Sample_real_clean & wgs$probe == X2) & is.na(real_n) ~ "f",   # Present in wgs but real_n is NA
!any(wgs$isolate == Sample_real_clean & wgs$probe == X2) & is.na(real_n) ~ "t"                                      # Not present in wgs and real_n is NA
)
) %>%
ungroup() %>%
select(-Sample_real_clean)
reads <- reads %>%
mutate(
wgs = case_when(
Sample_real == "aggR11_1" & X2 == "aggR11" ~ "y",
Sample_real == "aggR11_2" & X2 == "aggR11" ~ "y",
Sample_real == "aaiC47_1" & X2 == "aaiC47" ~ "y",
Sample_real == "aaiC47_2" & X2 == "aaiC47" ~ "y",
TRUE ~ wgs  # retain existing values for other rows
)
)
reads[reads == 0] <- NA
# Ensure complete combinations of X2 and Sample_real
complete_reads <- complete(reads, X2, Sample_real)
# Create a new column for the fill categories
complete_reads <- complete_reads %>%
mutate(fill_category = case_when(
is.na(real_n) & wgs == "t" ~ "True negative",
real_n > 0 & wgs == "y" ~ "True positive",
real_n > 0 & wgs == "n" ~ "False positive",
is.na(real_n) & wgs == "f" ~ "False negative",
TRUE ~ "True negative"
))
# Generate the plot
set2=ggplot(complete_reads, aes(X2, Sample_real)) +
geom_tile(aes(fill = fill_category), colour = "white") +
labs(title="Multiplex-testing on E. coli samples - set 2", x = "Probe-pair", y = "Sample") +
scale_fill_manual(values = c(
"True negative" = "gray95",
"True positive" = "palegreen3",
"False positive" = "khaki",
"False negative" = "lightsalmon"
)) +
theme(axis.text.x = element_text(size = 5, angle = 45, color = "black", hjust = 1),
axis.text.y = element_text(size = 5,  color = "black", vjust = 0.51),
legend.title = element_blank())
set2
ggarrange(set1, set2, ncol=2, labels=c("A", "B"), common.legend = TRUE, legend = "bottom")
##Count number of true/false positives/negatives---------
wgs_counts <- complete_reads %>%
group_by(wgs) %>%
dplyr::summarise(count = n())
# Print the counts
print(wgs_counts)
#Duplicates analyses--------
### Quantify correct probe detection among both duplicates-------
complete_reads <- complete_reads %>%
mutate(wgs = replace_na(wgs, 't'))
complete_reads <- complete_reads %>%
mutate(Sample_id = ifelse(grepl("^zNegative_", Sample_real), Sample_real, sub("_[12]$", "", Sample_real)))
# Group by Sample_id and X2, and then summarize the data
consistent_probes <- complete_reads %>%
group_by(Sample_id, X2) %>%
dplyr::summarize(consistent = n_distinct(wgs) == 1, .groups = 'drop')
# Filter to keep only those rows where the outcome is consistent
consistent_probes <- consistent_probes %>%
filter(consistent)
# Count the number of consistent probes per Sample_id and calculate the percentage
consistent_probes_count_set2 <- consistent_probes %>%
group_by(Sample_id) %>%
dplyr::summarize(
num_consistent_probes = n(),
percent_consistent_probes = (n() / 63) * 100,  # Assuming the total number of probes is 63
.groups = 'drop'
)
# Print the result
print(consistent_probes_count_set2)
#Plot single figure------------------
#Import dataset
setwd("~/switchdrive/Institution/Manuscripts/02_dMLA/dmla-amr-vfs/data")
reads_merged <- read.csv("ecoli_merged.csv", header = TRUE)
reads_merged
# Ensure complete combinations of X2 and Sample_real
complete_reads <- complete(reads_merged, X2, Sample_real)
# Create a new column for the fill categories
complete_reads <- complete_reads %>%
mutate(fill_category = case_when(
is.na(real_n) & wgs == "t" ~ "True negative",
real_n > 0 & wgs == "y" ~ "True positive",
real_n > 0 & wgs == "n" ~ "False positive",
is.na(real_n) & wgs == "f" ~ "False negative",
TRUE ~ "True negative"
))
# Generate the plot
ggplot(complete_reads, aes(X2, Sample_real)) +
geom_tile(aes(fill = fill_category), colour = "white") +
labs(title="Multiplex-testing on E. coli samples", x = "Detected probe-pair (target gene)", y = "DNA Sample") +
scale_fill_manual(values = c(
"True negative" = "gray95",
"True positive" = "palegreen3",
"False positive" = "khaki",
"False negative" = "lightsalmon"
)) +
theme(axis.text.x = element_text(size = 5, angle = 45, color = "black", hjust = 1),
axis.text.y = element_text(size = 5,  color = "black", vjust = 0.5),
legend.title = element_blank())
#dMLA positive Templates-------------------
##Load packages--------
library (ggplot2)
library(dplyr)
library(gridExtra)
library(ggpubr)
library(tidyr)
library(seqinr)
setwd("~/switchdrive/Institution/Manuscripts/02_dMLA/dmla-amr-vfs/data")
##Replicate 1----------
#Import results
reads1 <- read.csv("positive_output_tube1.csv", header = TRUE)
reads1
#Format df
reads1 <- reads1 %>%
mutate(Sample_real = as.character(X1)) %>%
mutate(Sample_real = case_when(
Sample_real == "CCACTAG" ~ "mcr28",Sample_real == "GTCTTCT" ~ "mcr64",Sample_real == "ACAAAGC" ~ "aadA1",
Sample_real == "AAAAGGC" ~ "aadA21",Sample_real == "ACTGTGT" ~ "aadA57", Sample_real == "CTGGTAC" ~ "aac3II63",
Sample_real == "GTTGCTA" ~ "aac3VI23", Sample_real == "CCATTCA" ~ "zNegative1",Sample_real == "GATATCG" ~ "aac6I6",
Sample_real == "ACAGGAT" ~ "aac6I123",Sample_real == "CGCATAC" ~ "ant2Ia1",Sample_real == "GGACCTA" ~ "aph6I29",
Sample_real == "GAACTGA" ~ "aph3386", Sample_real == "AGTCGTG" ~ "qnrB7",Sample_real == "TTCCAGG" ~ "qnrB35",
Sample_real == "TAGAGCG" ~ "zNegative2",Sample_real == "AAACCCT" ~ "qnrS1",Sample_real == "ATCCAGT" ~ "ermB1",
Sample_real == "TCTTCGT" ~ "mphA18",Sample_real == "GTGTCCT" ~ "dfrA243",Sample_real == "CACAGAT" ~ "dfrA369",
Sample_real == "ATAGAGC" ~ "dfrA15", Sample_real == "GGTCATG" ~ "dfrA58", Sample_real == "CCATCTC" ~ "zNegative3",
Sample_real == "TATGCAG" ~ "dfrA1",Sample_real == "AACCGCT" ~ "sul15",Sample_real == "TGACTCT" ~ "sul22",
Sample_real == "AAGCACA" ~ "sul336",Sample_real == "TGTGAAC" ~ "tetA13",Sample_real == "AACAGTG" ~ "tetB43",
Sample_real == "GCCTATA" ~ "tetM34",Sample_real == "GTCCTCT" ~ "zNegative4",Sample_real == "TAGAACG" ~ "intI125",
Sample_real == "TGGGTGA" ~ "astA13", Sample_real == "ACACGTG" ~ "aatA22",Sample_real == "TGCCCAA" ~ "aatA12314",
Sample_real == "TCGTACA" ~ "ipaH321", Sample_real == "AACCAAG" ~ "ipaH921", Sample_real == "GTGCTAT" ~ "eae111",
Sample_real == "TCCTCAT" ~ "zNegative5",Sample_real == "GTCGTAT" ~ "eae6271",Sample_real == "TCTGGAA" ~ "stx2181",
Sample_real == "CAGTAGG" ~ "stx23291", Sample_real == "ACGTCAT" ~ "aggR11",Sample_real == "ACGGAAC" ~ "stx1301",
Sample_real == "CGGATGA" ~ "stx11581",Sample_real == "CCGCATA" ~ "bfpA82", Sample_real == "GTGAAGA" ~ "zNegative6",
Sample_real == "AACGTGT" ~ "invE132",Sample_real == "AGAAGAC" ~ "eltA73",Sample_real == "TGTAGGG" ~ "eltA4510",
Sample_real == "AATGCCT" ~ "eltB12", Sample_real == "GCTTTCT" ~ "eltB2318", Sample_real == "CATGAAG" ~ "estIa94",
Sample_real == "CGATCAC" ~ "estIa1515",Sample_real == "TCGCGTT" ~ "zNegative7",Sample_real == "GATTGGC" ~ "bfpF56",
Sample_real == "CATCGGT" ~ "bfpF105", Sample_real == "CTTTCCA" ~ "aafA83",Sample_real == "ACCAGAT" ~ "aap223",
Sample_real == "GTGATAC" ~ "aaiC17",Sample_real == "TGCATCC" ~ "aaiC47", Sample_real == "TGCAAAC" ~ "uidA160",
Sample_real == "GCAACGA" ~ "zNegative8",Sample_real == "GCCATAC" ~ "uidA616",Sample_real == "TACCTTC" ~ "gadph195",
Sample_real == "GAATCGA" ~ "arpA19", Sample_real == "CTACGTT" ~ "chuA24", Sample_real == "GTTTCGG" ~ "trpA354",
Sample_real == "GCAAATG" ~ "Tsp19",Sample_real == "CTGACAC" ~ "yjaA12", Sample_real == "GCACTTT" ~ "zPCR_neg"))
### Plot without threshold---------------
r1a=ggplot(complete(reads1, X2, Sample_real), aes(X2, Sample_real, fill = log10(n))) +
geom_tile(colour = "white") +
labs(title = "Before Filter - Replicate 1",
x = "Probe-pair", y = "Sample") +
scale_fill_gradient2(low = "yellowgreen", mid = "red", high = "black", midpoint = log10(1000),
na.value = "gray95", name = "Reads counts",
breaks = log10(c(1, 10, 100, 1000, 10000, 100000)),
labels = c("1", "10", "100", "1'000", "10'000", "100'000")) +
theme(axis.text.x = element_text(size=4, angle=45, color = "black", hjust = 1),
axis.text.y = element_text(size=4,  color = "black", vjust = 1),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
title=element_text(size=13))
###Distribution of reads1------------------
##Filter of rows whit positive
filtered_reads1 <- reads1 %>%
filter(as.character(X2) != as.character(Sample_real))
ggplot(filtered_reads1, aes(x=n)) +
geom_histogram() +
theme_minimal() +
labs(title="Distribution of of false positive read counts for each probe-pair",
x="n",
y="Frequency") +
theme(legend.title = element_blank())+
facet_wrap(X2 ~ ., ncol = 10, scales="free")
r1a
#Calculate the 99.9% quantile of the gamma distribution of each the false positive for each target as threshold
# Assuming 'filtered_reads1' is your dataframe with columns 'n' and 'X2'
results_threshold <- filtered_reads1 %>%
group_by(X2) %>%
dplyr::summarise(
mean_data = mean(n),
var_data = var(n)
) %>%
mutate(
shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.999, shape = shape_estimate, rate = rate_estimate)
)
#Join results_threshold and reads1 dataframe to calculate calculate real_n
reads1 <- reads1 %>%
left_join(results_threshold %>% dplyr::select(X2, quantile_99_9), by = "X2")
# Subtract quantile_99_9 from n to create the new variable real_n
reads1 <- reads1 %>%
mutate(real_n = ifelse(n - quantile_99_9 < 0, 0, n - quantile_99_9))
reads1[reads1 == 0] <- NA
###Count number of true/false positives/negatives---------
complete_reads <- complete(reads1, X2, Sample_real)
# Add the error column based on the conditions
reads1 <- complete_reads %>%
mutate(
error = case_when(
X2 == Sample_real & !is.na(real_n) ~ "y",
X2 != Sample_real & !is.na(real_n) ~ "n",
X2 == Sample_real & is.na(real_n) ~ "f",
X2 != Sample_real & is.na(real_n) ~ "t"
)
)
error_counts <- reads1 %>%
group_by(error) %>%
dplyr::summarise(count = n())
# Print the counts
print(error_counts)
###Plot filtered results---------
r1=ggplot(complete(reads1, X2, Sample_real), aes(X2, Sample_real, fill = log10(real_n))) +
geom_tile(colour = "white") +
labs(title = "After Filter - Replicate 1",
x = "Probe-pair", y = "Sample") +
scale_fill_gradient2(low = "yellowgreen", mid = "red", high = "black", midpoint = log10(1000),
na.value = "gray95", name = "Reads counts",
breaks = log10(c(1, 10, 100, 1000, 10000, 100000)),
labels = c("1", "10", "100", "1'000", "10'000", "100'000")) +
theme(axis.text.x = element_text(size=4, angle=45, color = "black", hjust = 1),
axis.text.y = element_text(size=4,  color = "black", vjust = 1),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
title=element_text(size=13))
##Replicate 2-----------
reads2 <- read.csv("positive_output_tube2.csv", header = TRUE)
reads2
#Format df
reads2 <- reads2 %>%
mutate(Sample_real = as.character(X1)) %>%
mutate(Sample_real = case_when(
Sample_real == "CCACTAG" ~ "mcr28",Sample_real == "GTCTTCT" ~ "mcr64",Sample_real == "ACAAAGC" ~ "aadA1",
Sample_real == "AAAAGGC" ~ "aadA21",Sample_real == "ACTGTGT" ~ "aadA57", Sample_real == "CTGGTAC" ~ "aac3II63",
Sample_real == "GTTGCTA" ~ "aac3VI23", Sample_real == "CCATTCA" ~ "zNegative1",Sample_real == "GATATCG" ~ "aac6I6",
Sample_real == "ACAGGAT" ~ "aac6I123",Sample_real == "CGCATAC" ~ "ant2Ia1",Sample_real == "GGACCTA" ~ "aph6I29",
Sample_real == "GAACTGA" ~ "aph3386", Sample_real == "AGTCGTG" ~ "qnrB7",Sample_real == "TTCCAGG" ~ "qnrB35",
Sample_real == "TAGAGCG" ~ "zNegative2",Sample_real == "AAACCCT" ~ "qnrS1",Sample_real == "ATCCAGT" ~ "ermB1",
Sample_real == "TCTTCGT" ~ "mphA18",Sample_real == "GTGTCCT" ~ "dfrA243",Sample_real == "CACAGAT" ~ "dfrA369",
Sample_real == "ATAGAGC" ~ "dfrA15", Sample_real == "GGTCATG" ~ "dfrA58", Sample_real == "CCATCTC" ~ "zNegative3",
Sample_real == "TATGCAG" ~ "dfrA1",Sample_real == "AACCGCT" ~ "sul15",Sample_real == "TGACTCT" ~ "sul22",
Sample_real == "AAGCACA" ~ "sul336",Sample_real == "TGTGAAC" ~ "tetA13",Sample_real == "AACAGTG" ~ "tetB43",
Sample_real == "GCCTATA" ~ "tetM34",Sample_real == "GTCCTCT" ~ "zNegative4",Sample_real == "TAGAACG" ~ "intI125",
Sample_real == "TGGGTGA" ~ "astA13", Sample_real == "ACACGTG" ~ "aatA22",Sample_real == "TGCCCAA" ~ "aatA12314",
Sample_real == "TCGTACA" ~ "ipaH321", Sample_real == "AACCAAG" ~ "ipaH921", Sample_real == "GTGCTAT" ~ "eae111",
Sample_real == "TCCTCAT" ~ "zNegative5",Sample_real == "GTCGTAT" ~ "eae6271",Sample_real == "TCTGGAA" ~ "stx2181",
Sample_real == "CAGTAGG" ~ "stx23291", Sample_real == "ACGTCAT" ~ "aggR11",Sample_real == "ACGGAAC" ~ "stx1301",
Sample_real == "CGGATGA" ~ "stx11581",Sample_real == "CCGCATA" ~ "bfpA82", Sample_real == "GTGAAGA" ~ "zNegative6",
Sample_real == "AACGTGT" ~ "invE132",Sample_real == "AGAAGAC" ~ "eltA73",Sample_real == "TGTAGGG" ~ "eltA4510",
Sample_real == "AATGCCT" ~ "eltB12", Sample_real == "GCTTTCT" ~ "eltB2318", Sample_real == "CATGAAG" ~ "estIa94",
Sample_real == "CGATCAC" ~ "estIa1515",Sample_real == "TCGCGTT" ~ "zNegative7",Sample_real == "GATTGGC" ~ "bfpF56",
Sample_real == "CATCGGT" ~ "bfpF105", Sample_real == "CTTTCCA" ~ "aafA83",Sample_real == "ACCAGAT" ~ "aap223",
Sample_real == "GTGATAC" ~ "aaiC17",Sample_real == "TGCATCC" ~ "aaiC47", Sample_real == "TGCAAAC" ~ "uidA160",
Sample_real == "GCAACGA" ~ "zNegative8",Sample_real == "GCCATAC" ~ "uidA616",Sample_real == "TACCTTC" ~ "gadph195",
Sample_real == "GAATCGA" ~ "arpA19", Sample_real == "CTACGTT" ~ "chuA24", Sample_real == "GTTTCGG" ~ "trpA354",
Sample_real == "GCAAATG" ~ "Tsp19",Sample_real == "CTGACAC" ~ "yjaA12", Sample_real == "GCACTTT" ~ "zPCR_neg"))
###Plot without threshold-----------
r2a=ggplot(complete(reads2, X2, Sample_real), aes(X2, Sample_real, fill = log10(n))) +
geom_tile(colour = "white") +
labs(title = "Before Filter - Replicate 2",
x = "Probe-pair", y = "Sample") +
scale_fill_gradient2(low = "yellowgreen", mid = "red", high = "black", midpoint = log10(1000),
na.value = "gray95", name = "Reads counts",
breaks = log10(c(1, 10, 100, 1000, 10000, 100000)),
labels = c("1", "10", "100", "1'000", "10'000", "100'000")) +
theme(axis.text.x = element_text(size=4, angle=45, color = "black", hjust = 1),
axis.text.y = element_text(size=4,  color = "black", vjust = 1),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
title=element_text(size=13))
###Distribution of reads2------------------
##Filter of rows whit positive
filtered_reads2 <- reads2 %>%
filter(as.character(X2) != as.character(Sample_real))
ggplot(filtered_reads2, aes(x=n)) +
geom_histogram() +
theme_minimal() +
labs(title="Distribution of of false positive read counts for each probe-pair - Replicate 2",
x="n",
y="Frequency") +
theme(legend.title = element_blank())+
facet_wrap(X2 ~ ., ncol = 10, scales="free")
#Calculate the 99.9% quantile of the gamma distribution of each the false positive for each target as threshold
# Assuming 'filtered_reads2' is your dataframe with columns 'n' and 'X2'
results_threshold <- filtered_reads2 %>%
group_by(X2) %>%
dplyr::summarise(
mean_data = mean(n),
var_data = var(n)
) %>%
mutate(
shape_estimate = mean_data^2 / var_data,
rate_estimate = mean_data / var_data,
quantile_99_9 = qgamma(0.999, shape = shape_estimate, rate = rate_estimate)
)
#Join results_threshold and reads2 dataframe to calculate calculate real_n
reads2 <- reads2 %>%
left_join(results_threshold %>% dplyr::select(X2, quantile_99_9), by = "X2")
#Transform threshold from NaN to 1 for aaic47 and aggR11
reads2$quantile_99_9[is.na(reads2$quantile_99_9)] <- 1
# Subtract quantile_99_9 from n to create the new variable real_n
reads2 <- reads2 %>%
mutate(real_n = ifelse(n - quantile_99_9 < 0, 0, n - quantile_99_9))
reads2[reads2 == 0] <- NA
###Count number of true/false positives/negatives---------
complete_reads2 <- complete(reads2, X2, Sample_real)
# Add the error column based on the conditions
reads2 <- complete_reads2 %>%
mutate(
error = case_when(
X2 == Sample_real & !is.na(real_n) ~ "y",
X2 != Sample_real & !is.na(real_n) ~ "n",
X2 == Sample_real & is.na(real_n) ~ "f",
X2 != Sample_real & is.na(real_n) ~ "t"
)
)
error_counts2 <- reads2 %>%
group_by(error) %>%
dplyr::summarise(count = n())
# Print the counts
print(error_counts2)
###Plot filtered results---------
r2=ggplot(complete(reads2, X2, Sample_real), aes(X2, Sample_real, fill = log10(real_n))) +
geom_tile(colour = "white") +
labs(title = "After Filter - Replicate 2",
x = "Probe-pair", y = "Sample") +
scale_fill_gradient2(low = "yellowgreen", mid = "red", high = "black", midpoint = log10(1000),
na.value = "gray95", name = "Reads counts",
breaks = log10(c(1, 10, 100, 1000, 10000, 100000)),
labels = c("1", "10", "100", "1'000", "10'000", "100'000")) +
theme(axis.text.x = element_text(size=4, angle=45, color = "black", hjust = 1),
axis.text.y = element_text(size=4,  color = "black", vjust = 1),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
title=element_text(size=13))
ggarrange(r1a, r2a,r1, r2, ncol=2, nrow=2, labels=c("A", "B", "C", "D"), common.legend = TRUE, legend = "right")
##Adjusted reads counts of positive------------
#Import results
pcounts <- read.csv("positive_adjusted_merged.csv", header = TRUE)
pcounts
# Reshape the data to long format
pcounts_long <- pcounts %>%
pivot_longer(
cols = starts_with("Reads"),
names_to = "Replicate",
values_to = "Counts",
names_prefix = "Reads.counts."
)
# Calculate mean counts per sample across replicates
mean_counts <- pcounts_long %>%
group_by(Sample) %>%
summarize(MeanCounts = mean(Counts)) %>%
arrange(desc(MeanCounts))
# Reorder 'Sample' factor levels based on mean counts
pcounts_long$Sample <- factor(pcounts_long$Sample, levels = mean_counts$Sample)
pcounts_long$Replicate = as.factor(pcounts_long$Replicate)
# Plotting
ggplot(pcounts_long, aes(x = Sample, y = log10(Counts), fill = Replicate)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_point(data = mean_counts, aes(x = Sample, y = log10(MeanCounts), color = "Mean"),
inherit.aes = FALSE, size = 3) +
scale_fill_manual(values = c("tan2", "steelblue3"), labels = c("Replicate 1", "Replicate 2")) +
scale_color_manual(values = c("Mean" = "black"), labels = c("Mean")) +
scale_y_continuous(breaks = log10(c(1, 10, 100, 1000, 10000, 100000)),
labels = c("1", "10", "100", "1000", "10000", "100000")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", size=8.5),
axis.text.y = element_text(colour = "black", size=12),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
legend.title = element_blank(),
legend.text = element_text(size = 14)) +
labs(x = "Probe-pair", y = "Filtered Reads Counts")
# Order the samples based on the counts from Replicate 1
replicate2_order <- pcounts_long %>%
filter(Replicate == "replicate.2") %>%  # Adjust this if your column values are different
arrange(desc(Counts)) %>%
pull(Sample)
# Step 2: Convert 'Sample' into a factor with levels ordered as desired
pcounts_long$Sample <- factor(pcounts_long$Sample, levels = replicate2_order)
ggplot(pcounts_long, aes(x = Sample, y = Counts, fill = Replicate)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("orange", "blue"),
labels = c("Replicate 1", "Replicate 2")) + # Modify legend labels here
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better visibility
legend.title = element_blank()) +  # Optional: remove legend title if desired
labs(x = "Sample", y = "Adjusted Reads Counts")
# Plotting
ggplot(pcounts_long, aes(x = Sample, y = log10(Counts), fill = Replicate)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_point(data = mean_counts, aes(x = Sample, y = log10(MeanCounts), color = "Mean"),
inherit.aes = FALSE, size = 3) +
scale_fill_manual(values = c("tan2", "steelblue3"), labels = c("Replicate 1", "Replicate 2")) +
scale_color_manual(values = c("Mean" = "black"), labels = c("Mean")) +
scale_y_continuous(breaks = log10(c(1, 10, 100, 1000, 10000, 100000)),
labels = c("1", "10", "100", "1000", "10000", "100000")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", size=8.5),
axis.text.y = element_text(colour = "black", size=12),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
legend.title = element_blank(),
legend.text = element_text(size = 14)) +
labs(x = "Probe-pair", y = "Filtered Reads Counts")
##Adjusted reads counts of positive------------
#Import results
pcounts <- read.csv("positive_adjusted_merged.csv", header = TRUE)
pcounts
# Reshape the data to long format
pcounts_long <- pcounts %>%
pivot_longer(
cols = starts_with("Reads"),
names_to = "Replicate",
values_to = "Counts",
names_prefix = "Reads.counts."
)
# Calculate mean counts per sample across replicates
mean_counts <- pcounts_long %>%
group_by(Sample) %>%
summarize(MeanCounts = mean(Counts)) %>%
arrange(desc(MeanCounts))
# Reorder 'Sample' factor levels based on mean counts
pcounts_long$Sample <- factor(pcounts_long$Sample, levels = mean_counts$Sample)
pcounts_long$Replicate = as.factor(pcounts_long$Replicate)
# Plotting
ggplot(pcounts_long, aes(x = Sample, y = log10(Counts), fill = Replicate)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_point(data = mean_counts, aes(x = Sample, y = log10(MeanCounts), color = "Mean"),
inherit.aes = FALSE, size = 3) +
scale_fill_manual(values = c("tan2", "steelblue3"), labels = c("Replicate 1", "Replicate 2")) +
scale_color_manual(values = c("Mean" = "black"), labels = c("Mean")) +
scale_y_continuous(breaks = log10(c(1, 10, 100, 1000, 10000, 100000)),
labels = c("1", "10", "100", "1000", "10000", "100000")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", size=8.5),
axis.text.y = element_text(colour = "black", size=12),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
legend.title = element_blank(),
legend.text = element_text(size = 14)) +
labs(x = "Probe-pair", y = "Filtered Reads Counts")
